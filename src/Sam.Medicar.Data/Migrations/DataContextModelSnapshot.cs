// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sam.Medicar.Data.Context;

#nullable disable

namespace Sam.Medicar.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Dia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Horarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdMedico");

                    b.ToTable("Agenda", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dia = new DateTime(2022, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 1
                        },
                        new
                        {
                            Id = 2,
                            Dia = new DateTime(2022, 10, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 1
                        },
                        new
                        {
                            Id = 3,
                            Dia = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 2
                        },
                        new
                        {
                            Id = 4,
                            Dia = new DateTime(2022, 10, 3, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 2
                        },
                        new
                        {
                            Id = 5,
                            Dia = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 3
                        },
                        new
                        {
                            Id = 6,
                            Dia = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 3
                        },
                        new
                        {
                            Id = 7,
                            Dia = new DateTime(2022, 10, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 4
                        },
                        new
                        {
                            Id = 8,
                            Dia = new DateTime(2022, 10, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            Horarios = "09:00,10:00,13:30,15:00",
                            IdMedico = 4
                        });
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdAgenda")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdAgenda");

                    b.ToTable("Consulta", (string)null);
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Especialidade", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Pediatria"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Ginecologia"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Cardiologia"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Clínico Geral"
                        });
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Crm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("CRM");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("IdEspecialidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecialidade");

                    b.ToTable("Medico", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Crm = "3711",
                            Email = "drauzinho@medicar.com.br",
                            IdEspecialidade = 1,
                            Nome = "Drauzio Varella"
                        },
                        new
                        {
                            Id = 2,
                            Crm = "2544",
                            Email = "gregory@medicar.com.br",
                            IdEspecialidade = 2,
                            Nome = "Gregory House"
                        },
                        new
                        {
                            Id = 3,
                            Crm = "2227",
                            Email = "medicones@medicar.com.br",
                            IdEspecialidade = 3,
                            Nome = "Medicones Doutoris"
                        },
                        new
                        {
                            Id = 4,
                            Crm = "4367",
                            Email = "lauro@medicar.com.br",
                            IdEspecialidade = 4,
                            Nome = "Lauro Cirurgis"
                        });
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Agenda", b =>
                {
                    b.HasOne("Sam.Medicar.Domain.Entities.Medico", "Medico")
                        .WithMany("Agendas")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Consulta", b =>
                {
                    b.HasOne("Sam.Medicar.Domain.Entities.Agenda", "Agenda")
                        .WithMany("Consultas")
                        .HasForeignKey("IdAgenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agenda");
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Medico", b =>
                {
                    b.HasOne("Sam.Medicar.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Medicos")
                        .HasForeignKey("IdEspecialidade")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Agenda", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Especialidade", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Sam.Medicar.Domain.Entities.Medico", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
